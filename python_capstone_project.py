# -*- coding: utf-8 -*-
"""Python - Capstone Project

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10p0obkk5TiwfQChwmRkCfGJPpDd53l2j

# Project Title: OTP Verification System

## Problem Statement:

You are tasked with developing an OTP (One-Time Password) verification system in Python. The system should generate a 6-digit OTP and send it to the user's email address for verification. Upon receiving the OTP, the user should enter it into the system for validation. If the entered OTP matches the generated OTP, access should be granted; otherwise, access should be denied.
"""

pip install --upgrade gradio

import smtplib    # simple mail transfer protocol(smtp)
import time
import random
import gradio as gr

# Implement a function to generate a 6-digit OTP randomly.
def generate_otp():
    return str(random.randint(100000, 999999))

# Develop a function to simulate sending the OTP to the user's email address.
# SMTP --> sending and receiving e-mail between e-mail clients and servers.
def send_otp(email, otp):
  sender_email = 'pariwarnani@gmail.com'  # --> user email_id
  sender_password = 'asih vtll qnur yxvj'  # --> gives the device permission to access your Google Account of 16 digits passcode
  message = f"Subject: OTP Verification\n\nYour OTP is: {otp}"
  try:
    server = smtplib.SMTP('smtp.gmail.com', 587)   # ---> SMTP should instead use port 587.
    server.starttls() # --->  to upgrade from an insecure connection to a secure
    server.login(sender_email, sender_password)
    server.sendmail(sender_email, email, message)
    print(f"OTP has been sent to your email")

 # its indicates if there are any errors. like invalid user_name and password, unsupported encryption.
  except smtplib.SMTPAuthenticationError:
    print("Failed to authenticate. Please check your email credentials.")

  # when the server unexpectedly disconnects, or when an attempt is made to use the SMTP instance before connecting it to a server
  except smtplib.SMTPException as e:
    print(f"An error occurred while sending the email: {e}")
  finally:
    server.quit()

def received_otp():
    return input("Enter OTP received in email: ")

def verify_otp(entered_otp, generated_otp):
    return entered_otp == generated_otp

def main(email, verify_otp):
    generated_otp = generate_otp()
    send_otp(email, generated_otp)

    attempts = 3    # giving a chance --> no.of attempts

    while attempts > 0:
        entered_otp = received_otp()
        if verify_otp(entered_otp, generated_otp):
            print("OTP verification successful. You are now logged in!")
            break
        else:
            print("Incorrect OTP. Please try again.")
            attempts -= 1
            print(f"Attempts remaining: {attempts}")

if __name__ == "__main__":    # calling an main function
  name = input("Enter your name: ")
  print(f"Hello, {name}!")
  email = input("Enter your email address: ")
  main(email, verify_otp)  # Assuming `verify_otp` is defined elsewhere

# create app for OTP verification using gradio
def gr_main(email):
  global generated_otp
  generated_otp = generate_otp() # generate the otp
  send_otp(email, generated_otp)    # send the otp
  message='OTP has been sent to your email'
  return message

def verify_otp_gr(Enter_otp):
  global generated_otp
  if Enter_otp == generated_otp:
    return "OTP verification successful. You are now logged in!"
  else:
    return "Incorrect OTP. Please try again."

grmain = gr.Interface(fn = gr_main, inputs = 'text', outputs = 'text',
                      title = 'Enter email and get OTP process')
grmain.add (gr.Interface(fn=verify_otp_gr, inputs="text", outputs="text",
                      title="Enter OTP to verify"))

grmain.launch()
# grmain1.launch()

